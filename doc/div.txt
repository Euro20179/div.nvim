*div.txt* Plugin for creating dividers and boxes

============================================================================
1. Commands
                                                                     *:Boxify*
:[range]Boxify {style}
    see |boxify-styles|
:[range]Boxify {kwargs}
    see |boxify-kwargs|

                                                               *boxify-styles*
b
    uses the bold charset ━, ┃, etc...
d
    uses the double charset, ═, ║, etc...

                                                               *boxify-kwargs*
h={char}
    set the horizontal character, ─ by default
v={char}
    set the vertical character, │ by default
tl={char}
    set the top left char, ┐ by default
tr={char}
    set the top right char, ┌ by default
bl={char}
    set the bottom left char, └ by default
br={char}
    set the bottom right char, ┘ by default
width=[+]{width}
    set the width of the box to {width}
    if + is given, set the width of the box to auto + {width}
height=[+]{height}
    similar width=, but works on the height

                                                                      *:Divfw*
:Divfw {style}
    Sets the style of |:Divw|.

    {style} can be one of:
        auto - automatically determined based on |divw-rules|
        line - act as if one line was given for [range]
        box  - draw a box
        tb   - only set top and bottom to contain {text}

                                                                     *:Divline*
:[range]Divl[ine][!] {char} [{width}]
    Puts a line of {char} on lines [range] that is |div-textwidth| wide.
    Or if {width} is given, {width} wide.

    If ! is given, override the current line

    The default char is -

                                                                     *:Divword*
:[range]Divw[ord][!] {char} {text} [{width}]
    Puts {char} on either side of {text} to fill the entire width.
    See |Divline| for the rules reguarding how long the width is.

                                                                  *divw-rules*
    If |:Divfw| style is auto:
    If [range] is more than 1 line, and is an odd number of lines, {text}
    will only be put in the middle line, only the top and bottom lines will
    be full with {char}. If there are an even number of lines, {text} will be
    placed on the first and last lines, and the middle will be hollow.
    Otherwise use the |:Divfw| style

    If ! is given, override the current line

                                                                     *:Divbox*
:Divb[ox]
    Is a macro to:
        1. Use |:Boxify| on the current line
        2. Center the box
        3. Add a line on the middle row of the box using |:Divword|`! ─`
        4. Replace the middle │ with ┤ and ├ to make the box
           connect with the line

                                                                        *:Toc*
:[range]Toc [{char}] {kwargs}
    Turns [range] lines into a table-of-contents looking set of lines.
    uses the first <cWORD> as the section, the rest is the description.
    puts (|div-textwidth| / 2 + {dotp}) {char} between the section and description

    {char} is "." by default
    {dotp} is the dotpadding, 4 by default

    {kwargs}:
        dotp=n
            use a dotpadding of n
        char=x
            use x as the char

==============================================================================
2. Configuration
                                                                   *div-config*

There isn't much configuration here.

------------------------------------------------------------------------------
2.1 Variables
                                                               *div-variables*

                                                           *b:mmfml_textwidth*
b:mmfml_textwidth   the text width to use instead of 'textwidth'.
                    Falls back to 80.

==============================================================================
3. Misc
                                                               *div-textwidth*
The order for determining text width
1. use |b:mmfml_textwidth|
2. fallback 'textwidth'
3. fallback to 80

 vim: ft=help:tw=78:ts=8:norl:
